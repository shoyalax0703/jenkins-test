pipeline {
    agent any

    environment {
        DEPLOYMENT_FILE = 'deployment.yaml'  // Path to your Kubernetes deployment file
    }

    stages {
        stage('Checkout') {
            steps {
                // Get the code from your version control system
                checkout scm
            }
        }

        stage('Build & Test') {
            steps {
                // Your build and test steps here, e.g., 
                // sh 'make build'
                // sh 'make test'
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([string(credentialsId: 'kind', variable: 'K8S_TOKEN')]) {
                    sh """
                        # Configure kubectl to use the Service Account token
                        kubectl config set-credentials jenkins-deployer --token=$K8S_TOKEN
                        kubectl config set-context --current --user=jenkins-deployer

                        # Apply the deployment
                        kubectl apply -f $DEPLOYMENT_FILE
                    """
                }
            }
        }
    }

post {
    always {
        // Archive the build artifacts and test results, assuming you have such files
        archiveArtifacts artifacts: '**/target/*.jar', allowEmptyArchive: true
        junit '**/target/test-*.xml'
        
        // Clean up the workspace to save space
        cleanWs()
    }
    success {
        echo "Deployment was successful!"
        
        // Send a success notification, for example, to a Slack channel
        // slackSend (color: '#00FF00', message: "Deployment was successful! Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
    }
    failure {
        echo "Deployment failed!"
        
        // Send a failure notification, for example, to a Slack channel
        // slackSend (color: '#FF0000', message: "Deployment failed! Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
    }
    unstable {
        echo "Deployment had some issues!"
        
        // Send a notification for unstable builds, if needed
        // slackSend (color: '#FFFF00', message: "Deployment had some issues! Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]' (${env.BUILD_URL})")
    }
    changed {
        echo "Deployment status changed!"
        
        // This will run if the current build's status is different from the last build's status
    }
}
}